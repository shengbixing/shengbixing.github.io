<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[IIssNan's Notes]]></title>
  <subtitle><![CDATA[Quick notes.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://notes.iissnan.com/"/>
  <updated>2015-02-16T13:43:17.000Z</updated>
  <id>http://notes.iissnan.com/</id>
  
  <author>
    <name><![CDATA[iissnan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[ReactJS 快速入门]]></title>
    <link href="http://notes.iissnan.com/2015/getting-started-reactjs/"/>
    <id>http://notes.iissnan.com/2015/getting-started-reactjs/</id>
    <published>2015-02-16T05:19:33.000Z</published>
    <updated>2015-02-16T13:43:17.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://facebook.github.io/react/" target="_blank" rel="external">React</a> 是近期非常热门的一个前端开发框架。 这篇文章将介绍如何使用 React 来创建用户界面，希望能够起到抛砖引玉的效果。</p>
<p>相对于其他框架来说，React 提供了非常少的 API， 如同 <a href="http://gulpjs.com/" target="_blank" rel="external">Gulp</a>， 越是少量的 API 同时意味着越多的可能性。 正如那句名言所说：</p>
<blockquote>
<p>Less is more.</p>
</blockquote>
<p>但是，精简的 API 不是意味着没有一定的学习成本，我们还是需要对此框架进行一定的理解。 闲话不多说，让我们进入正题。首先，让我们来了解下 React 中使用到的一些术语。</p>
<h2 id="React_术语">React 术语</h2><ul>
<li><p>React Elements</p>
<p>代表 HTML 元素的 JavaScript 对象。 这些 JavaScript 对象最后被编译成对应的 HTML 元素。</p>
</li>
</ul>
<ul>
<li><p>Components</p>
<p>封装 React Elements， 包含一个或者多个 React Elements。 Components 用于创建可以复用的 UI 模块，例如 分页，侧栏导航等。</p>
</li>
<li><p>JSX</p>
<p>JSX 是 React 定义的一种 JavaScript 语法扩展，类似于 XML 。 JSX 是可选的， 我们完全可以使用 JavaScript 来编写 React 应用， 不过 JSX 提供了一套更为简便的方式来写 React 应用。</p>
</li>
<li><p>Virtual DOM</p>
<p>Virtual DOM 是一个模拟 DOM 树的 JavaScript 对象。 React 使用 Virtual DOM 来渲染 UI， 同时监听 Virtual DOM 上数据的变化并自动迁移这些变化到 UI 上。</p>
</li>
</ul>
<h2 id="DEMO_环境准备">DEMO 环境准备</h2><p>首先，在 <a href="http://facebook.github.io/react/downloads.html" target="_blank" rel="external">React Download 页面</a> 下载 Starter Kit，解压到某个地方。</p>
<p>进入到解压后的 <code>build</code> 目录，新建一个 <code>index.html</code> 文件，并且引用 <code>react.js</code> 和 <code>JSXTransformer.js</code> 后就可以开始编写 React 应用了。需要注意如果使用 JSX， 那么 <code>script</code> 标签的 <code>type</code> 应该更改为 <code>text/jsx</code>。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span> &gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>demo<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span>
<span class="line"></span>
<span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span>
<span class="line"></span>
<span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"react.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"JSXTransformer.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/jsx"</span> <span class="attribute">src</span>=<span class="value">"app.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span>
</pre></td></tr></table></figure>
<h2 id="第一个_React_Element">第一个 React Element</h2><p>创建一个 Element 只需调用 <code>React.createElement</code> 方法，并传入元素信息即可。例如：</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">var <span class="keyword">div</span> = React.createElement(<span class="string">'div'</span>, <span class="keyword">null</span>, <span class="string">"Hello React"</span>);</span>
<span class="line"></span>
<span class="line"><span class="comment">// 使用 JSX</span></span>
<span class="line">var <span class="keyword">div</span> = &lt;<span class="keyword">div</span>&gt;Hello React&lt;/<span class="keyword">div</span>&gt;</span>
</pre></td></tr></table></figure>
<p>创建之后就可以调用 <code>React.render</code> 方法渲染到页面上：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">React.render(<span class="keyword">div</span>, document.body);</span>
</pre></td></tr></table></figure>
<h2 id="第一个_React_Component">第一个 React Component</h2><p>React Component 抽象出相同 UI 组件的结构和逻辑。 通过调用 <code>React.createClass</code> 方法来创建一个 Component，并传入一个带有 <code>render</code> 方法的对象类型的参数。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HelloMessage = React.createClass(&#123;</span>
<span class="line">  render: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span>
<span class="line">    <span class="keyword">return</span> &lt;div&gt;Hello &#123;<span class="keyword">this</span>.props.name&#125;&lt;/div&gt;;</span>
<span class="line">  &#125;</span>
<span class="line">&#125;);</span>
<span class="line"></span>
<span class="line">React.render(&lt;HelloMessage name=<span class="string">"iissnan"</span> /&gt;, document.body);</span>
</pre></td></tr></table></figure>
<p>我们看到 <code>React.createClass</code> 接收了一个对象，并将这个方法返回赋值给 <code>HelloMessage</code>， 最后调用 <code>React.render</code> 方法将这个新建的 Component 渲染到页面上。从这个例子看来，一个 Component 与 Element 并无太大的差别。 事实上， Component 已经准备好了，我们可以增添一些结构和功能来扩展这个 Component 。</p>
<h2 id="Props">Props</h2><p>在上一个例子中，可以看到有一个特殊的引用： <code>this.props.name</code>。 这个引用称之为 <code>Props</code>，可以将他想象成 Component 的设置选项。</p>
<p>在使用上， <code>Props</code> 类似于 HTML 中的属性：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">React.render(&lt;HelloMessage <span class="property">name</span>=<span class="string">"foo"</span> /&gt;, document.body);</span>
</pre></td></tr></table></figure>
<p>在 Component 内部，通过 <code>this.props.name</code> 来引用这个 <code>Props</code>：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HelloMessage = React.createClass(&#123;</span>
<span class="line">  render: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span>
<span class="line">    <span class="keyword">return</span> &lt;div&gt;Hello &#123;<span class="keyword">this</span>.props.name&#125;&lt;/div&gt;;</span>
<span class="line">  &#125;</span>
<span class="line">&#125;);</span>
</pre></td></tr></table></figure>
<p>需要注意的是， Props 仅用来定制 Component， 这些数据不应该被改动。 如果涉及到需要做改动的数据， 得考虑使用 <code>state</code>。</p>
<h2 id="Stateful_Component">Stateful Component</h2><p>State 数据代表 Component 的状态， 用于维护 Component 内部的状态。 当 State 发生改变之后， React 将会重新渲染 UI 。调用 与 <code>Props</code> 类似， State 数据通过 <code>this.state</code> 访问：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Greeting = React.createClass(&#123;</span>
<span class="line">  getInitialState: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span>
<span class="line">    <span class="keyword">return</span> &#123; greeted: <span class="literal">false</span> &#125;;</span>
<span class="line">  &#125;,</span>
<span class="line">  greet: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span>
<span class="line">    <span class="keyword">this</span>.setState(&#123;</span>
<span class="line">      greeted: <span class="literal">true</span></span>
<span class="line">    &#125;);</span>
<span class="line">  &#125;,</span>
<span class="line">  render: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span>
<span class="line">    <span class="keyword">var</span> response = <span class="keyword">this</span>.state.greeted ? <span class="string">'Hi'</span> : <span class="string">''</span>;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">return</span> (</span>
<span class="line">      &lt;div&gt;</span>
<span class="line">        &lt;div&gt;Hello &#123;<span class="keyword">this</span>.props.name&#125;&lt;/div&gt;</span>
<span class="line">        &lt;span&gt;&#123;response&#125;&lt;/span&gt;</span>
<span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.greet&#125;&gt;Hi&lt;/button&gt;</span>
<span class="line">      &lt;/div&gt;</span>
<span class="line">    );</span>
<span class="line">  &#125;</span>
<span class="line">&#125;);</span>
<span class="line"></span>
<span class="line">React.render(&lt;Greeting name=<span class="string">"foo"</span> /&gt;, document.body);</span>
</pre></td></tr></table></figure>
<p>这个例子中加了几个函数，我们一一来看下。 首先是 <code>getInitialState</code> ， 这个方法在 Component 初始化的时候被调用， 返回 Component 初始时的状态数据。例子中，我们设置了 Component 初始时的 <code>greeted</code> 为 <code>false</code>。<br>然后是 <code>greet</code> 方法，这个方法被调用之后将修改状态数据 <code>greeted</code> 为 <code>true</code>。</p>
<p>当 State 发生改变后， React 将 Component 渲染到 Virtual DOM，新的 Virtual DOM 与 旧版本的进行比对，检查出改变的部分并更新浏览器的 DOM。 在这个例子中，当按钮被点击后， <code>greeted</code>状态数据发生了变化，UI 跟随着更新。</p>
<h2 id="组合">组合</h2><p>结合 Props 和 State，我们就可以使用 Component 来创建完整的应用。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Greeting = React.createClass(&#123;</span>
<span class="line">  getInitialState: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span>
<span class="line">    <span class="keyword">return</span> &#123; greeted: <span class="literal">false</span> &#125;;</span>
<span class="line">  &#125;,</span>
<span class="line">  greet: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span>
<span class="line">    <span class="keyword">this</span>.setState(&#123;</span>
<span class="line">      greeted: <span class="literal">true</span></span>
<span class="line">    &#125;);</span>
<span class="line">  &#125;,</span>
<span class="line">  render: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span>
<span class="line">    <span class="keyword">var</span> response = <span class="keyword">this</span>.state.greeted ? <span class="string">'Hi'</span> : <span class="string">''</span>;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">return</span> (</span>
<span class="line">      &lt;div&gt;</span>
<span class="line">        &lt;div&gt;Hello &#123;<span class="keyword">this</span>.props.name&#125;&lt;/div&gt;</span>
<span class="line">        &lt;span&gt;&#123;response&#125;&lt;/span&gt;</span>
<span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.greet&#125;&gt;Hi&lt;/button&gt;</span>
<span class="line">      &lt;/div&gt;</span>
<span class="line">    );</span>
<span class="line">  &#125;</span>
<span class="line">&#125;);</span>
<span class="line"></span>
<span class="line"><span class="keyword">var</span> users = [<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>];</span>
<span class="line"></span>
<span class="line"><span class="keyword">var</span> GreetingApp = React.createClass(&#123;</span>
<span class="line">  render: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span>
<span class="line">    <span class="keyword">var</span> greetings = <span class="keyword">this</span>.props.users.map(<span class="function"><span class="keyword">function</span> <span class="params">(user)</span> </span>&#123;</span>
<span class="line">      <span class="keyword">return</span> &lt;Greeting name=&#123;user&#125; /&gt;;</span>
<span class="line">    &#125;);</span>
<span class="line"></span>
<span class="line">    <span class="keyword">return</span> &lt;div&gt;&#123;greetings&#125;&lt;/div&gt;;</span>
<span class="line">  &#125;</span>
<span class="line">&#125;);</span>
<span class="line"></span>
<span class="line">React.render(&lt;GreetingApp users=&#123;users&#125; /&gt;, document.body);</span>
</pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://facebook.github.io/react/" target="_blank" rel="external">React</a> 是近期非常热门的一个前端开发框架。 这篇文章将介绍如何使用 React 来创建用户界面，希望能够起到抛砖引]]>
    </summary>
    
      <category term="Getting Started" scheme="http://notes.iissnan.com/tags/getting-started/"/>
    
      <category term="React" scheme="http://notes.iissnan.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Flipboard - 60 FPS on the mobile web]]></title>
    <link href="http://notes.iissnan.com/2015/60-fps-on-the-mobile-web/"/>
    <id>http://notes.iissnan.com/2015/60-fps-on-the-mobile-web/</id>
    <published>2015-02-15T09:40:35.000Z</published>
    <updated>2015-02-15T11:53:11.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><strong>The DOM is too slow.</strong></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p><strong>The DOM is too slow.</strong></p>
</blockquote>
]]>
    </summary>
    
      <category term="Canvas" scheme="http://notes.iissnan.com/tags/canvas/"/>
    
      <category term="React" scheme="http://notes.iissnan.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[适用于WEB开发者的Atom编辑器Package]]></title>
    <link href="http://notes.iissnan.com/2015/atom-packages-for-web-developers/"/>
    <id>http://notes.iissnan.com/2015/atom-packages-for-web-developers/</id>
    <published>2015-02-14T06:01:13.000Z</published>
    <updated>2015-02-16T13:43:17.000Z</updated>
    <content type="html"><![CDATA[<p>这个周末试用 <a href="https://github.com" target="_blank" rel="external">GitHub</a> 的 <a href="https://atom.io/" target="_blank" rel="external">Atom</a> 编辑器编写一个WEB项目，感觉非常好用。 Atom 的社区很繁荣，有着丰富的扩展/插件（<a href="https://atom.io/packages" target="_blank" rel="external">packages</a>）。安装 Atom 的 Package 非常简单，可以在编辑器的偏好设置里面安装，也可以在命令行中使用 <code>apm</code> 命令来安装。</p>
<p>在介绍适用于 WEB 开发的 Package 之前，让我们快速过下如何安装 Atom Packages。</p>
<a id="more"></a>
<h2 id="安装_Atom_Package">安装 Atom Package</h2><h3 id="通过偏好设置安装_Package">通过偏好设置安装 Package</h3><p>使用快捷键 <code>command + ,</code>/<code>ctrl + ,</code> 打开偏好设置。点击左侧的 <code>Install</code> 即可浏览线上的 Package 。 顶部是一个搜索框，可以搜索已经发布在 <a href="http://atom.io/http://atom.io/packages" target="_blank" rel="external">atom.io</a> 上的 Package ；紧接着是 <code>Feature Packages</code>，即精选的 Package ，列出来的是一些比较优质的 Package 。</p>
<p><img class="full-image" src="/uploads/install-atom-packages.png" alt="Install atom packages"></p>
<h3 id="通过_apm_命令安装_Package">通过 <code>apm</code> 命令安装 Package</h3><p>Atom 自带了一个 <code>apm</code> 的 Package 管理工具。我们可以在命令行下执行以下命令来确认 <code>apm</code> 是否已经安装：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">apm <span class="operator"><span class="keyword">help</span> <span class="keyword">install</span></span></span>
</pre></td></tr></table></figure>
<p>命令之后应该输出 <code>apm install</code> 的详细信息。如果输出不是 <code>apm install</code> 的命令信息，打开 Atom 菜单，选择 <code>Install Shell Commands</code> 来安装 <code>atom</code> 和 <code>apm</code> 。</p>
<p>确认 <code>apm</code> 正确安装后，便可以开始安装 Package 。正如上述执行 <code>apm help install</code> 所提示的，安装的命令是：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">apm install [&lt;package_name&gt;<span class="keyword">...</span>]</span>
<span class="line">apm install &lt;package_name&gt;@&lt;package_version&gt;</span>
<span class="line">apm install --packages-file my-packages.txt</span>
</pre></td></tr></table></figure>
<h2 id="Package_推荐">Package 推荐</h2><h3 id="快捷输入类">快捷输入类</h3><ul>
<li><p><a href="https://atom.io/packages/autocomplete-plus" target="_blank" rel="external">autocomplete-plus</a>，当输入的时候，提供可能的候选项。</p>
<p><img src="/uploads/atom-autocomplete-plus.gif" alt="autocomplete plus"></p>
</li>
</ul>
<ul>
<li><a href="https://atom.io/packages/atom-ctags" target="_blank" rel="external">atom-ctags</a>，使用 <code>ctags</code> 来强化自动完成功能，需借助于 <code>autocomplete-plus</code>。</li>
</ul>
<ul>
<li><p><a href="https://atom.io/packages/javascript-snippets" target="_blank" rel="external">javascript-snippets</a>，顾名思义，输入特殊的字符后自动扩展成对应的代码片段。</p>
<p><img src="/uploads/atom-javascript-snippets.gif" alt="javascript-snippets"></p>
</li>
</ul>
<ul>
<li><p><a href="https://atom.io/packages/vim-mode" target="_blank" rel="external">vim-mode</a></p>
<p>VIM-Mode 支持在 Atom 中使用 <code>VIM</code> 编辑器的操作方式来编辑。这对我来说是个非常 Killer 的 Package ，在此之前我一直在 WebStorm 上通过一个插件模拟 VIM 操作，异常难用。而在 Atom 上的这个模拟VIM操作，使用起来感觉还是比较顺手的。你可以混合 VIM 操作和普通的编辑操作。</p>
</li>
</ul>
<ul>
<li><p><a href="https://atom.io/packages/emmet" target="_blank" rel="external">emmet</a></p>
<p>手写 <code>HTML</code> 多少显得专业，但是手写的问题在于得大量的代码。<a href="http://emmet.io/" target="_blank" rel="external">Emmet</a>大幅提升手写的效率。非常值得一装。</p>
</li>
</ul>
<ul>
<li><a href="https://atom.io/packages/go-to-line" target="_blank" rel="external">go-to-line</a>，跳转到指定的行，只要 <code>ctrl + g</code> 后输入行号即可。</li>
</ul>
<h3 id="Linters">Linters</h3><ul>
<li><p><a href="https://atom.io/packages/jshint" target="_blank" rel="external">jshint</a>，验证你的 JavaScript ，写更专业的 JavaScript 代码。</p>
<p><img src="/uploads/atom-jshint.png" alt="JSHint"></p>
</li>
</ul>
<ul>
<li><p><a href="https://atom.io/packages/csslint" target="_blank" rel="external">csslint</a>， CSSLint 会报告出不合规定的 CSS 规则。</p>
<p><img src="/uploads/atom-csslint.png" alt="CSSLint"></p>
</li>
</ul>
<h3 id="版本控制类">版本控制类</h3><ul>
<li><p><a href="https://atom.io/packages/git-plus" target="_blank" rel="external">git plus</a>，在 Atom 里面执行 Git 命令，不用来回切换终端和编辑器。</p>
<p><img src="/uploads/atom-git-plus.gif" alt="git plug"></p>
</li>
</ul>
<ul>
<li><a href="https://atom.io/packages/git-log" target="_blank" rel="external">git-log</a>，在 Atom 里面显示图形化的提交记录。</li>
</ul>
<ul>
<li><a href="https://atom.io/packages/merge-conflicts" target="_blank" rel="external">merge-conflicts</a>，在 Atom 里面处理合并产生冲突的文件。</li>
</ul>
<h3 id="辅助类">辅助类</h3><ul>
<li><p><a href="https://atom.io/packages/minimap" target="_blank" rel="external">minimap</a>，为 Atom 加上 Sublime Text 的源码预览图，提供丰富的自定义选项，值得一用。</p>
<p><img src="/uploads/atom-minimap.png" alt="Mini Map"></p>
</li>
</ul>
<ul>
<li><a href="https://atom.io/packages/file-icons" target="_blank" rel="external">file-icons</a>，显示文件类型对应的图标。</li>
</ul>
<ul>
<li><a href="https://atom.io/packages/atom-beautify" target="_blank" rel="external">atom-beautify</a>，格式化代码，更统一的代码风格。</li>
</ul>
<ul>
<li><p><a href="https://atom.io/packages/color-picker" target="_blank" rel="external">Color Picker</a></p>
<p>在编辑器里面挑选颜色。通过右键选择 <code>Color picker</code> ，或者 <code>cmd + shift + c</code>/<code>ctrl + alt + c</code> 快捷键调出颜色选择面板。支持 <code>HEX, HEXA, RGB, RGBA, HSL, HSLA</code> 形式指定的颜色值。</p>
</li>
</ul>
<ul>
<li><a href="https://atom.io/packages/csscomb" target="_blank" rel="external">csscomb</a>，<a href="http://csscomb.com/" target="_blank" rel="external">CSSComb</a> 的一个扩展工具， CSSComb 帮你写出更漂亮的 CSS ！</li>
</ul>
<ul>
<li><a href="https://atom.io/packages/autoprefixer" target="_blank" rel="external">autoprefixer</a>，<a href="https://github.com/postcss/autoprefixer" target="_blank" rel="external">AutoPrefix</a>的一个扩展工具，自动为 CSS 属性添加特定的前缀。</li>
</ul>
<ul>
<li><a href="https://atom.io/packages/localization" target="_blank" rel="external">localization</a>，国际化 Package ，支持简体中文。但是在我使用的版本 <code>0.179.0</code> 中无法使用。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>这个周末试用 <a href="https://github.com">GitHub</a> 的 <a href="https://atom.io/">Atom</a> 编辑器编写一个WEB项目，感觉非常好用。 Atom 的社区很繁荣，有着丰富的扩展/插件（<a href="https://atom.io/packages">packages</a>）。安装 Atom 的 Package 非常简单，可以在编辑器的偏好设置里面安装，也可以在命令行中使用 <code>apm</code> 命令来安装。</p>
<p>在介绍适用于 WEB 开发的 Package 之前，让我们快速过下如何安装 Atom Packages。</p>]]>
    
    </summary>
    
      <category term="Atom" scheme="http://notes.iissnan.com/tags/atom/"/>
    
      <category term="编辑器" scheme="http://notes.iissnan.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[为何使用Jekyll这样的静态编译博客？]]></title>
    <link href="http://notes.iissnan.com/2015/why-to-blog-using-static-site-generator/"/>
    <id>http://notes.iissnan.com/2015/why-to-blog-using-static-site-generator/</id>
    <published>2015-02-06T15:57:03.000Z</published>
    <updated>2015-02-14T07:21:58.000Z</updated>
    <content type="html"><![CDATA[<p>晚上在<a href="http://v2ex.com/" target="_blank" rel="external">V2EX</a>看到一个讨论主题：<a href="http://v2ex.com/t/163522#reply6" target="_blank" rel="external">『为什么 Jekyll 这样的静态编译博客能火?』</a>。想到不久之前跟同事讨论过这个主题，当时作为饭后闲谈，聊过即过。今天再看到这个问题，就花了点时间把之前的一些想法写了下来。就以结论来说，我比较偏向使用静态编译博客。</p>
<p><img src="/uploads/img_2796.jpg" alt="" class="full-image"></p>
<p class="center">（拍摄于 2015/01/18 - 厦门 福建）</p>

<a id="more"></a>
<p>如果是为了纯粹的写作，我觉得那么任何一个提供写作的平台，比如<a href="https://medium.com/" target="_blank" rel="external">Medium</a>，<a href="http://www.jianshu.com/" target="_blank" rel="external">简书</a>和<a href="http://blog.sina.com.cn/" target="_blank" rel="external">新浪博客</a>都能让你更专注在写作上。</p>
<p>之前看到过一篇段子，说一警察盘问一司机为什么在后备箱装了那么多钱，然后司机想了想说，因为我能。对于使用独立博客的人来说，可能也有我能的这种心里。再加上爱折腾，所以一个新的形式出来被捧红其实不奇怪。</p>
<p>再说到写作方式，实际上我比较偏向静态博客的写作方式。静态博客在本地编辑文件，意味着可以选择你所喜欢的任意一个编辑器来写作，这是在线编辑办不到的，在线你只能使用一个功能有限的编辑器。</p>
<p>然后是存储方式，数据库存储或者文件存储我觉得这本身并不重要，重要的是数据的可管理性和安全性。选择合适的管理软件，我认为文件存储本身并没有太大的问题。静态博客有版本控制软件的助力，在数据管理和安全性上并不会比存储在数据库中差。</p>
<p>然后是速度，在使用静态博客的过程，因为我目前的页面仅有200个不到，所以构建速度在我可以接受的范围内。几条简单的命令，设置可以使用Travis CI来简化部署的过程，从流程上并不比后台管理麻烦。关键是这种操作过程更多显示的是一个『我能』的信息。<a href="http://octopress.org/" target="_blank" rel="external">Octpress</a>的宣传口号不就是『A blogging framework for hackers.』，带有很浓的装逼意味。</p>
<p>最后，因为<a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a>等类似网站提供了免费的托管服务，不用自己掏钱购买VPS或者虚拟主机，不用担心服务器稳定性问题。何乐而不为？</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>晚上在<a href="http://v2ex.com/">V2EX</a>看到一个讨论主题：<a href="http://v2ex.com/t/163522#reply6">『为什么 Jekyll 这样的静态编译博客能火?』</a>。想到不久之前跟同事讨论过这个主题，当时作为饭后闲谈，聊过即过。今天再看到这个问题，就花了点时间把之前的一些想法写了下来。就以结论来说，我比较偏向使用静态编译博客。</p>
<p><img src="/uploads/img_2796.jpg" alt="" class="full-image"/></p>
<p class="center">（拍摄于 2015/01/18 - 厦门 福建）</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[TIL - Vagrant and Unit testing]]></title>
    <link href="http://notes.iissnan.com/2015/reading-list-2015-02-03/"/>
    <id>http://notes.iissnan.com/2015/reading-list-2015-02-03/</id>
    <published>2015-02-03T02:15:52.000Z</published>
    <updated>2015-02-15T13:20:09.000Z</updated>
    <content type="html"><![CDATA[<p>今日阅读的文章内容主要包含两个部分，一个是<a href="https://www.vagrantup.com/" target="_blank" rel="external">Vagrant</a>，另外一个是JavaScript的单元测试相关的知识。Vagrant的内容涉及两个方面，一篇是如何这只默认Guest机器的默认Shell；另外一篇是问题解决，当我在Guest机器中将系统升级后，出现<code>guest additions</code>不匹配的问题。<br>JavaScript测试那篇文章，主要描述在编写JavaScript单元测试的时候会涉及到的框架，以及使用示例。</p>
<h2 id="Switch_to_your_favorite_shell_in_Vagrant"><a href="https://coderwall.com/p/1nvw-a/switch-to-your-favorite-shell-in-vagrant" target="_blank" rel="external">Switch to your favorite shell in Vagrant</a></h2><p>如果有使用Vagrant，并且想在Vagrant box里面使用<code>zsh</code>，这篇文章可以帮你轻松的解决这个问题。文章中举例通过<a href="https://www.chef.io/chef/" target="_blank" rel="external">Chef</a>和<a href="http://puppetlabs.com/" target="_blank" rel="external">Puppet</a>来安装，以下代码是通过<code>Chef</code>来安装：</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment"># Using Chef</span></span>
<span class="line">package 'zsh'</span>
<span class="line"><span class="instruction"></span>
<span class="line">execute </span><span class="string">"set zsh as default shell"</span> do</span>
<span class="line">  command <span class="string">"chsh -s $(which zsh) vagrant"</span></span>
<span class="line">end</span>
</pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Vagrant_Tip:_Sync_VirtualBox_Guest_Additions"><a href="http://kvz.io/blog/2013/01/16/vagrant-tip-keep-virtualbox-guest-additions-in-sync/" target="_blank" rel="external">Vagrant Tip: Sync VirtualBox Guest Additions</a></h2><p>在将一个Vagrant box从Ubuntu 12.04升级到14.04后，<code>Reload</code>后提示：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">The guest additions on this VM <span class="operator"><span class="keyword">do</span> <span class="keyword">not</span> <span class="keyword">match</span> the <span class="keyword">install</span> <span class="keyword">version</span> <span class="keyword">of</span> VirtualBox!</span></span>
</pre></td></tr></table></figure>
<p>文章通过介绍通过安装一个Vagrant Plugin来解决这个问题，简单方便。</p>
<h2 id="Testing_in_Browsers_and_Node_with_Mocha,_Chai,_Sinon,_and_Testem"><a href="http://www.kenpowers.net/blog/testing-in-browsers-and-node/" target="_blank" rel="external">Testing in Browsers and Node with Mocha, Chai, Sinon, and Testem</a></h2><p>写<code>JavaScript</code>测试时，你可能使用到的框架以及框架的使用例子。非常实用。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今日阅读的文章内容主要包含两个部分，一个是<a href="https://www.vagrantup.com/">Vagrant</a>，另外一个是JavaScript的单元测试相关的知识。Vagrant的内容涉及两个方面，一篇是如何这只默认Guest机器的默认Shell；另外一篇是问题解决，当我在Guest机器中将系统升级后，出现<code>guest additions</code>不匹配的问题。<br>JavaScript测试那篇文章，主要描述在编写JavaScript单元测试的时候会涉及到的框架，以及使用示例。</p>
<h2 id="Switch_to_your_favorite_shell_in_Vagrant"><a href="https://coderwall.com/p/1nvw-a/switch-to-your-favorite-shell-in-vagrant">Switch to your favorite shell in Vagrant</a></h2><p>如果有使用Vagrant，并且想在Vagrant box里面使用<code>zsh</code>，这篇文章可以帮你轻松的解决这个问题。文章中举例通过<a href="https://www.chef.io/chef/">Chef</a>和<a href="http://puppetlabs.com/">Puppet</a>来安装，以下代码是通过<code>Chef</code>来安装：</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment"># Using Chef</span></span>
<span class="line">package 'zsh'</span>
<span class="line"><span class="instruction"></span>
<span class="line">execute </span><span class="string">"set zsh as default shell"</span> do</span>
<span class="line">  command <span class="string">"chsh -s $(which zsh) vagrant"</span></span>
<span class="line">end</span>
</pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Today I Learned" scheme="http://notes.iissnan.com/tags/today-i-learned/"/>
    
      <category term="Unit testing" scheme="http://notes.iissnan.com/tags/unit-testing/"/>
    
      <category term="Vagrant" scheme="http://notes.iissnan.com/tags/vagrant/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Code and pray]]></title>
    <link href="http://notes.iissnan.com/2015/code-and-pray/"/>
    <id>http://notes.iissnan.com/2015/code-and-pray/</id>
    <published>2015-01-31T19:39:44.000Z</published>
    <updated>2015-02-15T13:23:42.000Z</updated>
    <content type="html"><![CDATA[<p>不久之前，发了条状态感慨说：</p>
<blockquote>
<p>害怕风险不该让你成为保守派</p>
</blockquote>
<p>越是严肃的产品，对于代码的质量要求越高，因为每一个bug都可能造成客户的不信任甚至客户的流失。这是一个很残酷的事实，如同在一条逆流之上，船只倒退一步，被拉开的距离可能是两步甚至更多。</p>
<p>为了保证质量，从确定需求到最终交付，每一个步骤都夹杂着不少人努力的汗水。而作为产品的负载体，代码的要求更是需要精细的制作。从代码被写下来的前一刻，就开始了各种测试。单元测试，开发测试，QA测试，TA测试。</p>
<p>bug是不可避免的，如同人无完人，但可以最大限度的避免。说来简单，实施起来如同登天。团队成员在具备过硬的技术等硬性条件的同时，还必须专注与激情。而在此条件之下，出现问题情有可原。所以说，在尽力的同时，不应害怕问题而畏首畏尾。总结问题经验，继续前进才是应有的态度，专业的态度。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>不久之前，发了条状态感慨说：</p>
<blockquote>
<p>害怕风险不该让你成为保守派</p>
</blockquote>
<p>越是严肃的产品，对于代码的质量要求越高，因为每一个bug都可能造成客户的不信任甚至客户的流失。这是一个很残酷的事实，如同在一条逆流之上]]>
    </summary>
    
      <category term="随笔" scheme="http://notes.iissnan.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[今日阅读及笔记]]></title>
    <link href="http://notes.iissnan.com/2015/reading-list-2015-1-31/"/>
    <id>http://notes.iissnan.com/2015/reading-list-2015-1-31/</id>
    <published>2015-01-31T05:08:04.000Z</published>
    <updated>2015-02-13T17:08:58.000Z</updated>
    <content type="html"><![CDATA[<p>阅读的文章：<a href="http://sixrevisions.com/javascript/why-i-ditched-angular-for-react/" target="_blank" rel="external">Why I Ditched Angular for React</a></p>
<p><a href="http://angularjs.org" target="_blank" rel="external">AngularJS</a>被人诟病最多的地方就是性能，学习曲线太陡。</p>
<h3 id="DOM操作">DOM操作</h3><p>因为AngularJS严重依赖于DOM，而DOM的操作是非常昂贵的。AngularJS应用在启动后必须先遍历一边DOM，进行<code>directive</code>的<code>compile</code>，所以需要当一个页面的节点超过一定数量后，这个过程会变成一个痛点。</p>
<a id="more"></a>
<h3 id="双向数据绑定">双向数据绑定</h3><p>双向数据是一把双刃剑，在ECMAScript 5中并未提供原生的数据/对象变化监视。所以，AngularJS采用了一种称为<code>dirty checking</code>的机制来跟踪数据的变化。当在任意一个<code>$scope</code>内更改了数据，Angular将触发了<code>$digest</code>，这个过程会导致性能问题。考虑应用绑定了一定数量的数据，一次<code>$digest</code>的耗时将很可观。</p>
<h3 id="独立的应用循环">独立的应用循环</h3><p>AngularJS拥有一套自己的应用循环，这就意味着外部的更改必须通过某种方式来通知AngularJS。当与第三方库集成时，必须调用AngularJS的<code>$apply</code>方法，以触发<code>$digest</code>。</p>
<h3 id="ReactJS">ReactJS</h3><p><a href="http://facebook.github.io/react/" target="_blank" rel="external">React</a>将自己定位在<code>MVC</code>模式的<code>V</code>。React更鼓励适用单向的数据绑定（one-way data flow）。借助于<code>Virtual DOM</code>，React在性能上会显著优于AngularJS。同时作为<code>V</code>，React提供了一个封装component的方式，类似于AngularJS中的<code>directive</code>。</p>
<h3 id="迁移到React?">迁移到React?</h3><p>与AngularJS不同，React作为<code>V</code>仅专注在相应层面的实现。举例来说，AnguarJS中提供的模块化，<code>$http/$q</code>、Router等功能，在React中皆没有。但可以接住于其他的库来实现。</p>
<p>附：Quora上一个关于AngularJS和React的<a href="http://www.quora.com/Pete-Hunt/Posts/Facebooks-React-vs-AngularJS-A-Closer-Look" target="_blank" rel="external">详细比对文章</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>阅读的文章：<a href="http://sixrevisions.com/javascript/why-i-ditched-angular-for-react/">Why I Ditched Angular for React</a></p>
<p><a href="http://angularjs.org">AngularJS</a>被人诟病最多的地方就是性能，学习曲线太陡。</p>
<h3 id="DOM操作">DOM操作</h3><p>因为AngularJS严重依赖于DOM，而DOM的操作是非常昂贵的。AngularJS应用在启动后必须先遍历一边DOM，进行<code>directive</code>的<code>compile</code>，所以需要当一个页面的节点超过一定数量后，这个过程会变成一个痛点。</p>]]>
    
    </summary>
    
      <category term="AngularJS" scheme="http://notes.iissnan.com/tags/angularjs/"/>
    
      <category term="Reading List" scheme="http://notes.iissnan.com/tags/reading-list/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Karma 快速上手]]></title>
    <link href="http://notes.iissnan.com/2015/karma/"/>
    <id>http://notes.iissnan.com/2015/karma/</id>
    <published>2015-01-29T13:22:33.000Z</published>
    <updated>2015-02-13T17:08:58.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://karma-runner.github.io/" target="_blank" rel="external">Karma</a>是一个JavaScript test runner。</p>
<h2 id="Test_Runner">Test Runner</h2><p>简单来说<code>Test runner</code>就是测试的实施者。很多时候，我们本身也是一个测试实施者。考虑这样一个对于前端开发者很常见的场景：</p>
<p>新建了一个脚本文件，并在这个脚本文件里面写上了一个函数。为了保证这个函数运行如预期，我们下一步是将脚本引用到页面上。紧接着打开浏览器，并查看执行结果。如果运行结果未如预期，我们返回编辑器，修改函数，然后再次运行测试。反复这样一个过程直至验证通过。在此过程中，我们充当的角色即是一个测试实施者。</p>
<p>重复的任务通常都可以自动化。Karma正是一个自动化的测试实施者。</p>
<a id="more"></a>
<h2 id="安装Karma">安装Karma</h2><p>Karma是一个npm模块，安装Karma异常简单。与<a href="http://gurntjs.com" target="_blank" rel="external">Grunt</a>相同，<code>karma</code>通常建议作为一个依赖模块安装在本地。然后通过Karma CLI运行。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装karma依赖模块</span></span>
<span class="line">npm install karma --<span class="keyword">save</span>-dev</span>
<span class="line"></span>
<span class="line"><span class="comment">// 全局安装karma cli</span></span>
<span class="line">npm install -<span class="keyword">g</span> karma-<span class="keyword">cli</span></span>
</pre></td></tr></table></figure>
<p>安装Karma CLI之后即可在调用<code>karma</code>来启动测试： </p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">karma <span class="built_in">start</span></span>
</pre></td></tr></table></figure>
<p>如果未安装Karma CLI，则需指定完整的本地<code>karma</code>路径：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">.<span class="regexp">/node_modules/</span>karma<span class="regexp">/bin/</span>karma start</span>
</pre></td></tr></table></figure>
<h2 id="项目配置">项目配置</h2><p>不同的项目千差万别，Karma提供了许多配置选项让项目的测试更易进行。配置文件可以通过<code>karma init</code>命令来生成，执行<code>karma init</code>之后，会进入一个交互式的命令行来配置选项。常见的配置，例如测试框架、自动捕捉的浏览器、源文件和测试文件等等。</p>
<p>当配置完成后，即可通过以下命令来启动测试：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">karma start karma<span class="class">.conf</span><span class="class">.js</span></span>
</pre></td></tr></table></figure>
<p>一个项目可以设置多个配置文件，给<code>karma start</code>提供不同的文件名即可调用不同的配置：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">karma start another<span class="class">.conf</span><span class="class">.js</span></span>
</pre></td></tr></table></figure>
<h2 id="Plugins">Plugins</h2><p>Karma Plugins同样是npm模块，通过<code>npm install</code>来安装插件。例如，安装<code>karma-mocha</code>：</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">npm install karma-mocha --<span class="built_in">save</span>-<span class="built_in">dev</span></span>
</pre></td></tr></table></figure>
<p>默认情况下，Karma为自动加载<code>node_modules</code>目录下与karma相邻，并以<code>karma-</code>开头的node模块。此类模块，例如：</p>
<ul>
<li>karma-mocha</li>
<li>karma-coverage</li>
<li>karma-mocha-reporter</li>
<li>karma-phantomjs-launcher</li>
</ul>
<p>也可以通过配置<code>plugins</code>属性来夹在特定的模块：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
</pre></td><td class="code"><pre><span class="line">// karma.conf.js</span>
<span class="line"></span>
<span class="line">module.exports = <span class="keyword">function</span> (config) &#123;</span>
<span class="line">  config.set(&#123;</span>
<span class="line">    // <span class="keyword">...</span></span>
<span class="line"></span>
<span class="line">    plugins: [</span>
<span class="line">      <span class="string">'karma-mocha'</span>,</span>
<span class="line">      <span class="string">'karma-chai'</span>	</span>
<span class="line">    ]</span>
<span class="line"></span>
<span class="line">    // <span class="keyword">...</span></span>
<span class="line">  &#125;);</span>
<span class="line">&#125;;</span>
</pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://karma-runner.github.io/">Karma</a>是一个JavaScript test runner。</p>
<h2 id="Test_Runner">Test Runner</h2><p>简单来说<code>Test runner</code>就是测试的实施者。很多时候，我们本身也是一个测试实施者。考虑这样一个对于前端开发者很常见的场景：</p>
<p>新建了一个脚本文件，并在这个脚本文件里面写上了一个函数。为了保证这个函数运行如预期，我们下一步是将脚本引用到页面上。紧接着打开浏览器，并查看执行结果。如果运行结果未如预期，我们返回编辑器，修改函数，然后再次运行测试。反复这样一个过程直至验证通过。在此过程中，我们充当的角色即是一个测试实施者。</p>
<p>重复的任务通常都可以自动化。Karma正是一个自动化的测试实施者。</p>]]>
    
    </summary>
    
      <category term="AngularJS" scheme="http://notes.iissnan.com/tags/angularjs/"/>
    
      <category term="Karma" scheme="http://notes.iissnan.com/tags/karma/"/>
    
      <category term="Testing" scheme="http://notes.iissnan.com/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[今日阅读列表]]></title>
    <link href="http://notes.iissnan.com/2015/reading-list-2015-01-26/"/>
    <id>http://notes.iissnan.com/2015/reading-list-2015-01-26/</id>
    <published>2015-01-26T10:31:50.000Z</published>
    <updated>2015-01-29T13:09:14.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.smashingmagazine.com/2014/10/07/introduction-to-unit-testing-in-angularjs/" target="_blank" rel="external">Smashing Magazine - An Introduction To Unit Testing In AngularJS Applications</a></p>
<p>Testing tool stack:</p>
<ul>
<li><a href="http://karma-runner.github.io/" target="_blank" rel="external">Karma</a> - Test runner.</li>
<li><a href="http://mochajs.org/" target="_blank" rel="external">Mocha</a> - JavaScript test framework.</li>
<li><a href="http://chaijs.com/" target="_blank" rel="external">Chai</a> - Assertion Library.</li>
<li><a href="http://sinonjs.org/" target="_blank" rel="external">Sinon</a> - Standalone test spies, stubs and mocks for JavaScript.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://www.smashingmagazine.com/2014/10/07/introduction-to-unit-testing-in-angularjs/" target="_blank" rel="external">Smashing M]]>
    </summary>
    
      <category term="AngularJS" scheme="http://notes.iissnan.com/tags/angularjs/"/>
    
      <category term="Reading List" scheme="http://notes.iissnan.com/tags/reading-list/"/>
    
      <category term="Sass" scheme="http://notes.iissnan.com/tags/sass/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Out of control]]></title>
    <link href="http://notes.iissnan.com/2015/out-of-control/"/>
    <id>http://notes.iissnan.com/2015/out-of-control/</id>
    <published>2015-01-22T10:33:59.000Z</published>
    <updated>2015-01-24T10:42:58.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/uploads/img_2795.jpg" alt=""></p>
<p class="center">（厦门的某个夜景，拍摄于 01/18/2015）</p>


<p>转眼又是一周过去，突然意识到的那种感慨只能一人消费，无法引起他人的共鸣。这周如同进去一个迷雾重重的森林，看不清前方的路，焦躁与恐惧轮流占领思想的高地，在迷茫中慌乱瞎转。</p>
<p>在一阵乱转之余，回头再看也不尽没有收获。</p>
<p>第一应该提到当是再听Muse，多年前最喜欢的一个乐队。Panic Station开场那旋律让我如同感觉是见到了许久未见的熟人，回到了久违的温暖之地。第一次听Muse的歌，还是在大学里的某一日下午，被一阵神秘的旋律所打动，我想Muse吸引我的绝大多数是因为歌曲中那些神秘的前奏。</p>
<p>第二，本周花费时间最多的网站，当属<a href="https://github.com" target="_blank" rel="external">GitHub</a>。无论上班或者下班，都会接触到GitHub。目前估计在我的网站访问量里，GitHub会超越Google成为top 1。</p>
<p>第三，个人主页进入下个一版本。上一个版本基于<a href="https://angularjs.org/" target="_blank" rel="external">AngularJS</a>开发，使用<a href="http://yeoman.io/" target="_blank" rel="external">Yeoman</a>构建，然后通过git subtree发布。整个堆栈看似十分壮观，但用到主页上庞大的有点吓人。按照本周同事的段子来讲就是，十分具备将一切简单事物复杂化的能力。所以在经过了三天的酝酿以后，终于在晚上找了空闲重新改版了一下。一个页面，抛弃掉原先的工具之后，感觉非常清爽。目标是在简单中体现出精细的细节，如同制作一件艺术品，久浸岁月与汗水之后沉淀而来。</p>
<p>第四，正在制作一个秘密的项目，期望进展顺利。</p>
<p>最后，小希正以日新月异的速度成长，昨晚听到电视里播放小苹果，竟然会跟着节奏晃动身体，边晃边笑。再试了下Panic Station，也会跟着晃，太逗了。现在还在吚吚哑哑，哪天就会开口要求买零食吃了，因为她是见吃必定会去抢的吃货潜力股。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/uploads/img_2795.jpg" alt=""></p>
<p class="center">（厦门的某个夜景，拍摄于 01/18/2015）</p>


<p>转眼又是一周过去，突然意识到的那种感慨只能一人消费，无法引起他人的共鸣。这周如同]]>
    </summary>
    
      <category term="随笔" scheme="http://notes.iissnan.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[今日阅读列表]]></title>
    <link href="http://notes.iissnan.com/2015/Reading-List-2015-01-16/"/>
    <id>http://notes.iissnan.com/2015/Reading-List-2015-01-16/</id>
    <published>2015-01-16T14:52:57.000Z</published>
    <updated>2015-01-24T10:41:04.000Z</updated>
    <content type="html"><![CDATA[<p>最近的项目在下一个发布将放弃对<code>IE8</code>的支持，于是准备将<code>AngularJS</code>从<code>1.2.7</code>升级到<code>1.3.x</code><br>在正式的迁移之前，对<code>AngularJS</code>1.3的一些改动做调研，以下是今天调研的四篇文章。</p>
<ul>
<li><a href="http://blog.thoughtram.io/angularjs/2014/10/14/exploring-angular-1.3-one-time-bindings.html" target="_blank" rel="external">Exploring Angular 1.3: One-time bindings</a></li>
<li><a href="http://blog.thoughtram.io/angularjs/2014/11/06/exploring-angular-1.3-angular-hint.html" target="_blank" rel="external">Exploring Angular 1.3: Angular-hint</a></li>
<li><a href="http://blog.thoughtram.io/angularjs/2014/10/19/exploring-angular-1.3-ng-model-options.html" target="_blank" rel="external">Exploring Angular 1.3: ng-model-options</a></li>
<li><a href="http://blog.thoughtram.io/angularjs/2014/11/19/exploring-angular-1.3-stateful-filters.html" target="_blank" rel="external">Exploring Angular 1.3: Stateful filters</a></li>
</ul>
<h3 id="单向数据绑定">单向数据绑定</h3><p>双向绑定可谓<code>AngularJS</code>的核心杀手锏之一。但由于每一个绑定都增添了一个<code>watcher</code>，绑定的数据在不断的增加，<code>$digest</code>势必会花费更多的时间去处理。一方面许多数据只需一次性绑定即可，后续无需再次更新；另一方面，为了提高整体的性能，<code>AngularJS</code>在1.3提供了单向的绑定。在使用上，单向数据绑定与双向仅有细微的差别，即在`{{}}` directive中，为绑定的数据添加<code>::</code>前缀即可:</p>

<!--￼0-->


<h3 id="angular-hint">angular-hint</h3><a id="more"></a>
<p>AngularJS 1.3中新增一个<code>angular-hint</code>模块，这个模块旨在帮助开发者更易于开发<code>AngularJS</code>应用程序，避免开发中一些易遗漏，但难于调试的问题。例如，在<code>HTML</code>中引入了一个新的<code>directive</code>，但是忘记将这个<code>directive</code>加入application的依赖模块中。使用这个模块的步骤如下：</p>
<ol>
<li><p>下载<code>angular-hint</code>模块</p>
<pre><code>npm <span class="operator"><span class="keyword">install</span> <span class="comment">--save angular-hint</span></span>
</code></pre></li>
<li><p>在页面中引用此模块</p>
<pre><code>&lt;<span class="keyword">script</span> src=<span class="string">"path/to/angular-hint/hint.js&gt;&lt;/script&gt;"</span>
</code></pre></li>
<li><p>使用<code>ng-hint</code> directive</p>
<pre><code>&lt;<span class="tag">html</span> ng-app=<span class="string">"exampleApp"</span> ng-hint&gt;
</code></pre></li>
</ol>
<p>新增的<code>angular-hint</code>包含5个子模块：<code>angular-hint-controllers</code>, <code>angular-hint-directives</code>, <code>angular-hint-dom</code>, <code>angular-hint-events</code>, <code>angular-hint-modules</code>以及<code>angular-hint-interpolation</code>，各个模块对应不同的错误类型检测。使用<code>angular-hint</code>的时候，可以仅使用其中的某个/些模块：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">ng-app</span>=<span class="value">"exampleApp"</span> <span class="attribute">ng-hint-include</span>=<span class="value">"dom directives"</span>&gt;</span></span>
</pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近的项目在下一个发布将放弃对<code>IE8</code>的支持，于是准备将<code>AngularJS</code>从<code>1.2.7</code>升级到<code>1.3.x</code><br>在正式的迁移之前，对<code>AngularJS</code>1.3的一些改动做调研，以下是今天调研的四篇文章。</p>
<ul>
<li><a href="http://blog.thoughtram.io/angularjs/2014/10/14/exploring-angular-1.3-one-time-bindings.html">Exploring Angular 1.3: One-time bindings</a></li>
<li><a href="http://blog.thoughtram.io/angularjs/2014/11/06/exploring-angular-1.3-angular-hint.html">Exploring Angular 1.3: Angular-hint</a></li>
<li><a href="http://blog.thoughtram.io/angularjs/2014/10/19/exploring-angular-1.3-ng-model-options.html">Exploring Angular 1.3: ng-model-options</a></li>
<li><a href="http://blog.thoughtram.io/angularjs/2014/11/19/exploring-angular-1.3-stateful-filters.html">Exploring Angular 1.3: Stateful filters</a></li>
</ul>
<h3 id="单向数据绑定">单向数据绑定</h3><p>双向绑定可谓<code>AngularJS</code>的核心杀手锏之一。但由于每一个绑定都增添了一个<code>watcher</code>，绑定的数据在不断的增加，<code>$digest</code>势必会花费更多的时间去处理。一方面许多数据只需一次性绑定即可，后续无需再次更新；另一方面，为了提高整体的性能，<code>AngularJS</code>在1.3提供了单向的绑定。在使用上，单向数据绑定与双向仅有细微的差别，即在`{{}}` directive中，为绑定的数据添加<code>::</code>前缀即可:</p>

<!--￼0-->


<h3 id="angular-hint">angular-hint</h3>]]>
    
    </summary>
    
      <category term="AngularJS" scheme="http://notes.iissnan.com/tags/angularjs/"/>
    
      <category term="Reading List" scheme="http://notes.iissnan.com/tags/reading-list/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[The ButterFly Effect]]></title>
    <link href="http://notes.iissnan.com/2015/The-ButterFly-Effect/"/>
    <id>http://notes.iissnan.com/2015/The-ButterFly-Effect/</id>
    <published>2015-01-12T15:33:42.000Z</published>
    <updated>2015-01-24T10:41:04.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>人的一切痛苦，本质上都是对自己的无能的愤怒。</p>
<p><strong>王小波</strong></p>
</blockquote>
<p>一只上海的蝴蝶煽动翅膀后，引起了厦门两个人的龙卷风。世事无常，往往事情的发展总出人意料，令人啼笑皆非。且不问结果如何，尽自己之所能，积极地面对。古语有言，尽人事听天命，大概便是如此。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>人的一切痛苦，本质上都是对自己的无能的愤怒。</p>
<p><strong>王小波</strong></p>
</blockquote>
<p>一只上海的蝴蝶煽动翅膀后，引起了厦门两个人的龙卷风。世事无常，往往事情的发展总出人意料，令人啼笑皆非。且]]>
    </summary>
    
      <category term="随笔" scheme="http://notes.iissnan.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Link directives after asynchronous calls in AngularJS]]></title>
    <link href="http://notes.iissnan.com/2015/Link-directives-after-asynchronous-calls-in-AngularJS/"/>
    <id>http://notes.iissnan.com/2015/Link-directives-after-asynchronous-calls-in-AngularJS/</id>
    <published>2015-01-08T13:36:32.000Z</published>
    <updated>2015-01-24T10:41:04.000Z</updated>
    <content type="html"><![CDATA[<p>在许多场景中，需要等待异步的请求完成后对DOM进行操作。例如，在异步获取图片数据后，对图片进行等比缩放。对于DOM的操作通常放置在<code>directive</code>中，而当数据是异步请求的时候，DOM的数据并未就绪，此时在<code>directive</code>中去操作时会无法找到数据进而导致操作失败。</p>
<p>考虑对图片进行等比缩放的场景，假定将图片缩放的操作放置在<code>image-resize</code>的<code>directive</code>中，图片的<code>src</code>等待异步请求后才能获取到。HTML代码如下： </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">&lt;<span class="tag">img</span> ng-src=<span class="string">"image.src"</span> alt=<span class="string">"image.alt"</span> image-<span class="attribute">resize</span> /&gt;</span>
</pre></td></tr></table></figure>
<p><code>ng-src</code>绑定到<code>image.src</code>上，在此数据变化时就可以判定获取图片地址的异步请求已经完成。所以，在<code>image-resize</code>中通过监视<code>ng-src</code>这个属性，当变化的时候就进行缩放操作：</p>
<a id="more"></a>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'directives'</span>, [])</span>
<span class="line">    .directive(<span class="string">'imageResize'</span>, [<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> &#123;</span>
<span class="line">            restrict: <span class="string">'A'</span>,</span>
<span class="line">            link: <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$scope</span>, <span class="variable">$element</span>, <span class="variable">$attrs</span>)</span> </span>&#123;</span>
<span class="line">                <span class="variable">$attrs</span>.<span class="variable">$observe</span>(<span class="string">'ngSrc'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span>
<span class="line">                    <span class="comment">// Resize image.</span></span>
<span class="line">                &#125;);</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;;</span>
<span class="line">    &#125;]);</span>
</pre></td></tr></table></figure>
<p>由于对于图片的操作仅需在获取到图片地址后执行一次，所以使用<code>$attributes.$observe</code>并不是一个上等的方案。如果能在异步执行完成，执行<code>directive</code>就无需进行监视操作。在AngularJS中，<code>directive</code>首先会被<code>compile</code>一次，并在第一次使用的时候进行<code>link</code>，而第一使用受类似<code>ng-if</code>等的限定。</p>
<p>也就是说，当一个DOM元素上的<code>ng-if</code>中表达式为<code>false</code>时，元素上的其他<code>directive</code>不会被<code>link</code>。使用这个特性，以上的代码可以简写：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 新增了ng-if，绑定到image.loaded变量上--&gt;</span></span>
<span class="line"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">ng-src</span>=<span class="value">"image.src"</span> <span class="attribute">alt</span>=<span class="value">"image.alt"</span> <span class="attribute">ng-if</span>=<span class="value">"image.loaded"</span> <span class="attribute">image-resize</span> /&gt;</span></span>
</pre></td></tr></table></figure>
<p>同时<code>image-resize</code>内部对于<code>ngSrc</code>属性的监视也可以去掉：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'directives'</span>, [])</span>
<span class="line">    .directive(<span class="string">'imageResize'</span>, [<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> &#123;</span>
<span class="line">            restrict: <span class="string">'A'</span>,</span>
<span class="line">            link: <span class="function"><span class="keyword">function</span> <span class="params">(<span class="variable">$scope</span>, <span class="variable">$element</span>, <span class="variable">$attrs</span>)</span> </span>&#123;</span>
<span class="line">                <span class="comment">// 无需监视attr.ngSrc属性</span></span>
<span class="line">                <span class="comment">// Resize image.</span></span>
<span class="line">            &#125;</span>
<span class="line">        &#125;;</span>
<span class="line">    &#125;]);</span>
</pre></td></tr></table></figure>
<p>当异步请求完成时，将<code>image.loaded</code>变量设定为<code>true</code>，当AngularJS执行下一轮<code>digest</code>的时候，图片元素上的<code>ng-if</code>结果为<code>true</code>，触发<code>resize-image</code>的<code>link</code>，此后即可以对图片进行后续的操作。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在许多场景中，需要等待异步的请求完成后对DOM进行操作。例如，在异步获取图片数据后，对图片进行等比缩放。对于DOM的操作通常放置在<code>directive</code>中，而当数据是异步请求的时候，DOM的数据并未就绪，此时在<code>directive</code>中去操作时会无法找到数据进而导致操作失败。</p>
<p>考虑对图片进行等比缩放的场景，假定将图片缩放的操作放置在<code>image-resize</code>的<code>directive</code>中，图片的<code>src</code>等待异步请求后才能获取到。HTML代码如下： </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">&lt;<span class="tag">img</span> ng-src=<span class="string">"image.src"</span> alt=<span class="string">"image.alt"</span> image-<span class="attribute">resize</span> /&gt;</span>
</pre></td></tr></table></figure>
<p><code>ng-src</code>绑定到<code>image.src</code>上，在此数据变化时就可以判定获取图片地址的异步请求已经完成。所以，在<code>image-resize</code>中通过监视<code>ng-src</code>这个属性，当变化的时候就进行缩放操作：</p>]]>
    
    </summary>
    
      <category term="AngularJS" scheme="http://notes.iissnan.com/tags/angularjs/"/>
    
      <category term="AngularJS Tips" scheme="http://notes.iissnan.com/tags/angularjs-tips/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[今日阅读]]></title>
    <link href="http://notes.iissnan.com/2015/Reading-List-2015-01-04/"/>
    <id>http://notes.iissnan.com/2015/Reading-List-2015-01-04/</id>
    <published>2015-01-04T06:37:11.000Z</published>
    <updated>2015-01-07T14:46:29.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><a href="https://medium.com/@addyosmani/javascript-application-architecture-on-the-road-to-2015-d8125811101b" target="_blank" rel="external">JavaScript Application Architecture On The Road To 2015</a></li>
<li><a href="https://docs.vagrantup.com/v2/getting-started/index.html" target="_blank" rel="external">Vagrant - GETTING STARTED</a></li>
<li><a href="https://docs.vagrantup.com/v2/getting-started/project_setup.html" target="_blank" rel="external">Vagrant - PROJECT SETUP</a></li>
<li><a href="https://docs.vagrantup.com/v2/getting-started/boxes.html" target="_blank" rel="external">Vagrant - BOXES</a></li>
<li><a href="https://docs.vagrantup.com/v2/getting-started/up.html" target="_blank" rel="external">Vagrant - UP AND SSH</a></li>
<li><a href="https://docs.vagrantup.com/v2/getting-started/synced_folders.html" target="_blank" rel="external">Vagrant - SYNCED FOLDERS</a></li>
<li><a href="http://davidwalsh.name/css-flip" target="_blank" rel="external">Create a CSS Flipping Animation</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li><a href="https://medium.com/@addyosmani/javascript-application-architecture-on-the-road-to-2015-d8125811101b" target="_blank" rel="]]>
    </summary>
    
      <category term="CSS3" scheme="http://notes.iissnan.com/tags/css3/"/>
    
      <category term="JavaScript" scheme="http://notes.iissnan.com/tags/javascript/"/>
    
      <category term="Reading List" scheme="http://notes.iissnan.com/tags/reading-list/"/>
    
      <category term="Vagrant" scheme="http://notes.iissnan.com/tags/vagrant/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ReactJS: Keep Simple. Everything can be a component!]]></title>
    <link href="http://notes.iissnan.com/2014/ReactJS-Keep-Simple-Everything-can-be-a-component/"/>
    <id>http://notes.iissnan.com/2014/ReactJS-Keep-Simple-Everything-can-be-a-component/</id>
    <published>2014-12-31T09:24:27.000Z</published>
    <updated>2015-01-24T15:25:05.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Talk about ReactJS and how to turn your development process to much easier and simple.</p>
<p>By <strong>Pedro Nauck</strong></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>Talk about ReactJS and how to turn your development process to much easier and simple.</p>
<p>By <strong>Pedro Nauck</strong]]>
    </summary>
    
      <category term="PPT" scheme="http://notes.iissnan.com/tags/ppt/"/>
    
      <category term="ReactJS" scheme="http://notes.iissnan.com/tags/reactjs/"/>
    
      <category term="SpeakerDeck" scheme="http://notes.iissnan.com/tags/speakerdeck/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Using custom fonts in Rails 4]]></title>
    <link href="http://notes.iissnan.com/2014/Using-custom-fonts-in-Rails-4/"/>
    <id>http://notes.iissnan.com/2014/Using-custom-fonts-in-Rails-4/</id>
    <published>2014-12-30T05:38:40.000Z</published>
    <updated>2015-01-07T14:46:29.000Z</updated>
    <content type="html"><![CDATA[<p>To use custom fonts in Rails 4 applications, just follow:</p>
<ol>
<li>Create <code>fonts</code> directory in <code>app/assets</code></li>
<li>Put your custon fonts in the directory created above</li>
<li><p>Reference to fonts in CSS using <code>font-url</code> function. For example:</p>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="at_rule">@<span class="keyword">font-face</span></span> <span class="rules">&#123;</span>
<span class="line">  <span class="rule"><span class="attribute">font-family</span>:<span class="value"> <span class="string">'Lato'</span>,</span>
<span class="line">  src: <span class="function">font-url</span>(<span class="string">'lato.woff'</span>) <span class="function">format</span>(<span class="string">'woff'</span>)</span></span>;</span>
<span class="line">  <span class="rule"><span class="attribute">font-weight</span>:<span class="value"> normal</span></span>;</span>
<span class="line">  <span class="rule"><span class="attribute">font-style</span>:<span class="value"> normal</span></span>;</span>
<span class="line"><span class="rule">&#125;</span></span></span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>You can place fonts into sub-directory to organize multiple fonts, add directory name in <code>font-url</code>. Such as:</p>
<pre><code><span class="comment"><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">@font-face&#123;</span>
<span class="line">    //<span class="keyword">...</span> Rule definition</span>
<span class="line">    src: font-url(<span class="string">'lato/lato.woff'</span>) format(<span class="string">'woff'</span>);</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></span>
</code></pre><hr>
<p>在Rails 4应用中使用自定义字体，只需以下步骤：</p>
<ol>
<li>在<code>app/assets</code>目录下添加<code>fonts</code>目录</li>
<li>将自定义字体放置于<code>app/assets/fonts</code>目录下</li>
<li><p>在定义字体的CSS文件中，使用<code>font-url</code>函数来调用字体。例如：</p>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="at_rule">@<span class="keyword">font-face</span></span> <span class="rules">&#123;</span>
<span class="line">  <span class="rule"><span class="attribute">font-family</span>:<span class="value"> <span class="string">'Lato'</span>,</span>
<span class="line">  src: <span class="function">font-url</span>(<span class="string">'lato.woff'</span>) <span class="function">format</span>(<span class="string">'woff'</span>)</span></span>;</span>
<span class="line">  <span class="rule"><span class="attribute">font-weight</span>:<span class="value"> normal</span></span>;</span>
<span class="line">  <span class="rule"><span class="attribute">font-style</span>:<span class="value"> normal</span></span>;</span>
<span class="line"><span class="rule">&#125;</span></span></span>
</pre></td></tr></table></figure>
</li>
</ol>
<p>另外，当使用多种自定义字体的时候，可以将字体文件放进各自的子目录中。引用的时候，只要在对应的字体定义中包含子目录名称即可。例如：</p>
<pre><code><span class="comment"><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">@font-face&#123;</span>
<span class="line">    //<span class="keyword">...</span> Rule definition</span>
<span class="line">    src: font-url(<span class="string">'lato/lato.woff'</span>) format(<span class="string">'woff'</span>);</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure></span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>To use custom fonts in Rails 4 applications, just follow:</p>
<ol>
<li>Create <code>fonts</code> directory in <code>app/assets</code></li]]>
    </summary>
    
      <category term="Ruby on Rails" scheme="http://notes.iissnan.com/tags/ruby-on-rails/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[今日阅读]]></title>
    <link href="http://notes.iissnan.com/2014/Reading-list-2014-12-29/"/>
    <id>http://notes.iissnan.com/2014/Reading-list-2014-12-29/</id>
    <published>2014-12-29T01:44:52.000Z</published>
    <updated>2014-12-29T13:46:15.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><a href="http://stackoverflow.com/questions/7600454/how-to-prevent-page-scrolling-when-scrolling-a-div-element" target="_blank" rel="external">How to prevent page scrolling when scrolling a DIV element?</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element.scrollIntoView" target="_blank" rel="external">Element.scrollIntoView()</a></li>
<li><a href="http://ejohn.org/blog/getboundingclientrect-is-awesome/" target="_blank" rel="external">getBoundingClientRect is Awesome</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li><a href="http://stackoverflow.com/questions/7600454/how-to-prevent-page-scrolling-when-scrolling-a-div-element" target="_blank" rel]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[今日阅读]]></title>
    <link href="http://notes.iissnan.com/2014/Reading-list-2014-12-28/"/>
    <id>http://notes.iissnan.com/2014/Reading-list-2014-12-28/</id>
    <published>2014-12-28T13:51:43.000Z</published>
    <updated>2014-12-28T14:11:12.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://guides.ruby-china.org/getting_started.html" target="_blank" rel="external">RailsGuide - Rails 入门</a><br><a href="http://guides.ruby-china.org/action_controller_overview.html" target="_blank" rel="external">RailsGuide - Action Controller 简介</a><br><a href="http://guides.ruby-china.org/routing.html" target="_blank" rel="external">RailsGuide - Rails 路由全解</a><br><a href="http://guides.ruby-china.org/layouts_and_rendering.html" target="_blank" rel="external">RailsGuide - Rails 布局和视图渲染</a><br><a href="http://guides.ruby-china.org/active_record_basics.html" target="_blank" rel="external">RailsGuide - Active Record 基础</a><br><a href="http://guides.ruby-china.org/association_basics.html" target="_blank" rel="external">RailsGuide - Active Record 关联</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://guides.ruby-china.org/getting_started.html" target="_blank" rel="external">RailsGuide - Rails 入门</a><br><a href="http://g]]>
    </summary>
    
      <category term="Reading List" scheme="http://notes.iissnan.com/tags/reading-list/"/>
    
      <category term="Ruby on Rails" scheme="http://notes.iissnan.com/tags/ruby-on-rails/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Debug grunt tasks with node-inspector]]></title>
    <link href="http://notes.iissnan.com/2014/Debug-grunt-tasks-with-node-inspector/"/>
    <id>http://notes.iissnan.com/2014/Debug-grunt-tasks-with-node-inspector/</id>
    <published>2014-12-24T03:21:04.000Z</published>
    <updated>2015-01-24T10:41:04.000Z</updated>
    <content type="html"><![CDATA[<p>随着项目的增长，<code>Grunt</code>任务也相对地变复杂。通过<code>console.log</code>或者<code>grunt.log.writeln</code>等方法去调试会变得越来越耗时。所幸的是，可以使用<a href="https://github.com/node-inspector/node-inspector" target="_blank" rel="external">Node Inspector</a>来做断点调试，以增加<code>Grunt</code>任务的开发效率。</p>
<p>Node Inspector是一个基于Blink Developer Tools的图形化调试工具，可以用来调试<a href="http://nodejs.org" target="_blank" rel="external">NodeJs</a>应用。安装Node Inspector：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g node-inspector</span>
</pre></td></tr></table></figure>
<p>完成之后即可以开始调试，步骤如下：</p>
<ul>
<li>在任务代码中添加断点代码<code>debugger</code></li>
<li><p>启动Node Inspector</p>
<pre><code><span class="comment">node</span><span class="literal">-</span><span class="comment">debug</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">web</span><span class="literal">-</span><span class="comment">port=9999</span> <span class="comment">grunt</span><span class="literal">-</span><span class="comment">path</span> <span class="comment">task</span><span class="literal">-</span><span class="comment">name</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">task</span><span class="literal">-</span><span class="comment">option</span>
</code></pre><p>  在Windows 7系统中, 如果通过全局安装<code>grunt-cli</code>的话，那么<code>grunt-path</code> 就是 <code>%appdata%\npm\node_modules\grunt-cli\bin\grunt</code>。</p>
</li>
</ul>
<p>参考：</p>
<ul>
<li><a href="https://github.com/node-inspector/node-inspector" target="_blank" rel="external">Node Inspector</a></li>
<li><a href="http://stackoverflow.com/questions/11171013/using-node-inspector-with-grunt-tasks" target="_blank" rel="external">Using node-inspector with grunt tasks</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>随着项目的增长，<code>Grunt</code>任务也相对地变复杂。通过<code>console.log</code>或者<code>grunt.log.writeln</code>等方法去调试会变得越来越耗时。所幸的是，可以使用<a href="https://gi]]>
    </summary>
    
      <category term="Grunt" scheme="http://notes.iissnan.com/tags/grunt/"/>
    
      <category term="Node.js" scheme="http://notes.iissnan.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Test if links are external with JavaScript]]></title>
    <link href="http://notes.iissnan.com/2014/Test-if-links-are-external-with-JavaScript/"/>
    <id>http://notes.iissnan.com/2014/Test-if-links-are-external-with-JavaScript/</id>
    <published>2014-12-23T06:08:14.000Z</published>
    <updated>2015-01-10T15:23:28.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> internalLinkPattern = <span class="keyword">new</span> <span class="built_in">RegExp</span>(location.host);</span>
<span class="line"><span class="keyword">var</span> links = <span class="built_in">document</span>.<span class="built_in">querySelectorAll</span>(<span class="string">'a'</span>);</span>
<span class="line"></span>
<span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span>
<span class="line">    <span class="keyword">var</span> link = links[i];</span>
<span class="line"></span>
<span class="line">    internalLinkPattern.test(link.href) ?</span>
<span class="line">        link.setAttribute(<span class="string">'data-target'</span>, <span class="string">'internal'</span>) :</span>
<span class="line">        link.setAttribute(<span class="string">'data-target'</span>, <span class="string">'external'</span>);</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line"]]>
    </summary>
    
      <category term="JavaScript" scheme="http://notes.iissnan.com/tags/javascript/"/>
    
      <category term="Snippet" scheme="http://notes.iissnan.com/tags/snippet/"/>
    
  </entry>
  
</feed>